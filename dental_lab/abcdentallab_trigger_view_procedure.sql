DROP VIEW IF EXISTS restock_supply;
CREATE VIEW restock_supply AS
SELECT * FROM SUPPLY WHERE SUPPLY_QUANTITY < SUPPLY_THRESHOLD;

DROP VIEW IF EXISTS restock_material;
CREATE VIEW restock_material AS
SELECT * FROM MATERIAL WHERE MATERIAL_QUANTITY < MATERAIL_THRESHOLD;

DROP VIEW IF EXISTS dental_office_balance;
CREATE VIEW dental_office_balance AS
	SELECT O.OFFICE_ID, O.OFFICE_NAME, SUM(CLINE_SUBTOTAL) AS SALES_TOTAL, P.CHECK_AMOUNT, 
	(CASE WHEN P.CHECK_AMOUNT IS NULL THEN SUM(CLINE_SUBTOTAL) ELSE SUM(CLINE_SUBTOTAL)-CHECK_AMOUNT END) AS "CURRENT_BALANCE"
	FROM DENTAL_CASE D JOIN CASE_INVOICE_LINE C ON D.DEN_CASE_ID = C.DEN_CASE_ID
	JOIN OFFICE O ON D.OFFICE_ID = O.OFFICE_ID 
	LEFT JOIN (SELECT OFFICE_ID,SUM(CHECK_AMOUNT) AS CHECK_AMOUNT FROM CHECK_PAYMENT GROUP BY OFFICE_ID) AS P ON O.OFFICE_ID = P.OFFICE_ID
	GROUP BY O.OFFICE_ID, O.OFFICE_NAME, P.CHECK_AMOUNT;

DROP VIEW IF EXISTS technician_case_view;
CREATE VIEW technician_case_view AS
	SELECT DENTAL_CASE.DEN_CASE_ID AS CASE_ID,DENTAL_CASE.DEN_CASE_GETDATE AS CASE_GETDATE,
    DENTAL_CASE.DEN_CASE_PROD_DUEDATE AS PRODUCTION_DUEDATE,
	GROUP_CONCAT('  ',EMPLOYEE.EMP_FNAME,' ',EMPLOYEE.EMP_LNAME) AS 'TECHNICIANS'
	FROM DENTAL_CASE JOIN PRODUCTION ON DENTAL_CASE.DEN_CASE_ID = PRODUCTION.DEN_CASE_ID
	JOIN EMPLOYEE ON PRODUCTION.EMP_ID=EMPLOYEE.EMP_ID
	GROUP BY DENTAL_CASE.DEN_CASE_ID,DENTAL_CASE.DEN_CASE_GETDATE,DENTAL_CASE.DEN_CASE_PROD_DUEDATE
    HAVING DENTAL_CASE.DEN_CASE_PROD_DUEDATE >= CURRENT_DATE()
	ORDER BY DENTAL_CASE.DEN_CASE_ID DESC;

DROP VIEW IF EXISTS driver_case_view;
CREATE VIEW  driver_case_view AS
	SELECT D.DEN_CASE_ID, CONCAT(DEN_CASE_PAT_FNAME," ",DEN_CASE_PAT_LNAME) AS "PATIENT_NAME",
    DEN_CASE_DELIVERYBY_DATE AS "DELIVERY_BY", OFFICE_NAME, 
    CONCAT(OFFICE_ADDRESS,' ',OFFICE_CITY,' ',OFFICE_STATE,', ',OFFICE_ZIPCODE) AS "OFFICE_ADDERSS",
    CONCAT(OFFICE_HOURS,' LUNCH ',OFFICE_LUNCH_TIME) AS "OFFICE_HOURS",
    CONCAT('  ',E.EMP_FNAME,' ',E.EMP_LNAME) AS 'DRIVER'
    FROM OFFICE O JOIN DENTAL_CASE D ON O.OFFICE_ID = D.OFFICE_ID
    JOIN DELIVERY DE ON D.DEN_CASE_ID = DE.DEN_CASE_ID
    JOIN EMPLOYEE E ON DE.EMP_ID = E.EMP_ID
    WHERE DEN_CASE_DELIVERYBY_DATE >= CURRENT_DATE()
    ORDER BY DEN_CASE_DELIVERYBY_DATE DESC;


DELIMITER $$
DROP PROCEDURE IF EXISTS monthly_balance_sheet$$
CREATE PROCEDURE monthly_balance_sheet(
				IN GET_MONTH INT,
                IN GET_YEAR	 INT
)
BEGIN
	DECLARE REVENUE 			NUMERIC(10,2) DEFAULT 0.00; 
    DECLARE SUPPLY_EXPENSE 		NUMERIC(10,2) DEFAULT 0.00;
    DECLARE MATERIAL_EXPENSE 	NUMERIC(10,2) DEFAULT 0.00;
    DECLARE SALARY				NUMERIC(10,2) DEFAULT 0.00;
    DECLARE SALES_TAX			NUMERIC(10,2) DEFAULT 0.00;
    DECLARE NET_PROFIT			NUMERIC(10,2) DEFAULT 0.00;
    
	SELECT SUM(CLINE_SUBTOTAL) INTO REVENUE FROM CASE_INVOICE_LINE C JOIN DENTAL_CASE D ON C.DEN_CASE_ID = D.DEN_CASE_ID
    WHERE YEAR(D.DEN_CASE_INVOICE_DATE) = GET_YEAR AND MONTH(D.DEN_CASE_INVOICE_DATE) = GET_MONTH;
	SELECT SUM(VSLINE_SUBTOTAL) INTO SUPPLY_EXPENSE FROM VEND_SUPPLY_LINE VSL JOIN VENDOR_INVOICE V ON VSL.VINV_CODE = V.VINV_CODE
    WHERE YEAR(V.VINV_DATE) = GET_YEAR AND MONTH(V.VINV_DATE) = GET_MONTH;
	SELECT SUM(VMLINE_SUBTOTAL) INTO MATERIAL_EXPENSE FROM VEND_MATERIAL_LINE VML JOIN VENDOR_INVOICE V ON VML.VINV_CODE = V.VINV_CODE
    WHERE YEAR(V.VINV_DATE) = GET_YEAR AND MONTH(V.VINV_DATE) = GET_MONTH;
	SELECT SUM(O.OCCUPATION_SALARY) INTO SALARY FROM EMPLOYEE E JOIN OCCUPATION O ON E.OCCUPATION_CODE = O.OCCUPATION_CODE;
	SELECT SUM(CLINE_TAX) INTO SALES_TAX FROM CASE_INVOICE_LINE C JOIN DENTAL_CASE D ON C.DEN_CASE_ID = D.DEN_CASE_ID
    WHERE YEAR(D.DEN_CASE_INVOICE_DATE) = GET_YEAR AND MONTH(D.DEN_CASE_INVOICE_DATE) = GET_MONTH;
    
    IF REVENUE IS NULL THEN SET REVENUE = 0.00;END IF;
    IF SUPPLY_EXPENSE IS NULL THEN SET SUPPLY_EXPENSE = 0.00;END IF;
    IF MATERIAL_EXPENSE IS NULL THEN SET MATERIAL_EXPENSE = 0.00;END IF;
    IF SALARY IS NULL THEN SET SALARY = 0.00;END IF;
    IF SALES_TAX IS NULL THEN SET SALES_TAX = 0.00;END IF;
    SET NET_PROFIT = REVENUE - (SUPPLY_EXPENSE+MATERIAL_EXPENSE+SALARY+SALES_TAX);
    SELECT REVENUE, SUPPLY_EXPENSE,MATERIAL_EXPENSE,SALARY,SALES_TAX,NET_PROFIT;
END$$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS office_statement_by_date$$
CREATE PROCEDURE office_statement_by_date(
				IN GET_ID INT, 
                IN START_DATE DATE,
                IN END_DATE DATE
)
BEGIN
	SELECT D.DEN_CASE_ID AS "DENTAL_CASEID",D.DEN_CASE_INVOICE_DATE AS "INVOICE_DATE",
    CONCAT(DEN_CASE_PAT_FNAME," ",DEN_CASE_PAT_LNAME) AS "PATIENT_NAME",
	GROUP_CONCAT(CLINE_DESCRIP) AS "CASE_DESCRIPTION",SUM(CLINE_SUBTOTAL) AS "CASE_TOTAL"
	FROM CASE_INVOICE_LINE C LEFT JOIN DENTAL_CASE D ON C.DEN_CASE_ID = D.DEN_CASE_ID
    WHERE D.DEN_CASE_INVOICE_DATE >= START_DATE AND D.DEN_CASE_INVOICE_DATE <= END_DATE AND OFFICE_ID = GET_ID
	GROUP BY D.DEN_CASE_ID,DEN_CASE_INVOICE_DATE,D.DEN_CASE_PAT_FNAME,D.DEN_CASE_PAT_LNAME;
END$$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS get_case_info $$
CREATE PROCEDURE get_case_info (
	IN CaseID INTEGER
)
BEGIN
	SELECT 
	DENTAL_CASE.DEN_CASE_ID,
	CONCAT (DENTAL_CASE.DEN_CASE_PAT_FNAME, ' ', DENTAL_CASE.DEN_CASE_PAT_LNAME) AS "PATIENT_NAME",
	DENTAL_CASE.DEN_CASE_INVOICE_DATE AS "INVOICE_DATE",
	DENTAL_CASE.OFFICE_ID,OFFICE.OFFICE_NAME,
    CASE_TOTAL.CASE_DESCRIPTION,
	CASE_TOTAL.DEN_CASE_TOTAL AS "CASE_TOTAL"
	FROM DENTAL_CASE JOIN
	(SELECT DEN_CASE_ID, SUM(CLINE_SUBTOTAL) AS DEN_CASE_TOTAL,
    GROUP_CONCAT(CLINE_DESCRIP) AS CASE_DESCRIPTION
    FROM CASE_INVOICE_LINE GROUP BY DEN_CASE_ID HAVING DEN_CASE_ID=CaseID) AS CASE_TOTAL
	ON DENTAL_CASE.DEN_CASE_ID=CASE_TOTAL.DEN_CASE_ID
    JOIN OFFICE ON DENTAL_CASE.OFFICE_ID = OFFICE.OFFICE_ID;
END $$
DELIMITER ;


DELIMITER $$
DROP TRIGGER IF EXISTS trg_case_line_total$$
CREATE TRIGGER trg_case_line_total 
	BEFORE INSERT 
    ON CASE_INVOICE_LINE FOR EACH ROW
BEGIN 
	SET NEW.CLINE_PRICE = (SELECT SERVICE_PRICE FROM SERVICE WHERE SERVICE_CODE = NEW.SERVICE_CODE AND SERVICE_CODE <> 0);
	SET NEW.CLINE_TAX = NEW.CLINE_UNITS * SERVICE_PRICE * 0.0875;
    SET NEW.CLINE_SUBTOTAL = NEW.CLINE_UNITS * SERVICE_PRICE;
END$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS trg_material_line_total$$
CREATE TRIGGER trg_material_line_total
	BEFORE INSERT
    ON VEND_MATERIAL_LINE FOR EACH ROW
BEGIN
	SET NEW.VMLINE_TAX = NEW.VMLINE_UNITS * NEW.VMLINE_PRICE * 0.0875;
    SET NEW.VMLINE_SUBTOTAL = NEW.VMLINE_UNITS * NEW.VMLINE_PRICE;
END$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS trg_supply_line_total$$
CREATE TRIGGER trg_supply_line_total
	BEFORE INSERT
    ON VEND_SUPPLY_LINE FOR EACH ROW
BEGIN
	SET NEW.VSLINE_TAX = NEW.VSLINE_UNITS * NEW.VSLINE_PRICE * 0.0875;
    SET NEW.VSLINE_SUBTOTAL = NEW.VSLINE_UNITS * NEW.VSLINE_PRICE;
END$$
DELIMITER ;


